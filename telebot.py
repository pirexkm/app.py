from telegram import Updatefrom telegram.ext import Updater, CommandHandler, CallbackContextimport timefrom byte import *from datetime import datetime#302358203":brad12345brad"#"3023108786": "d1sdquch7g1fon"# The rest of the elements are the command-line arguments#3023147506": "st3853qcnx6mzb""ALLOWED_USERNAME =['adamooxx']import threadingimport timefrom telegram.ext import ApplicationBuilder, CommandHandler, ContextTypesfrom main import *import subprocessimport timeimport socketimport requestsimport randomfrom protobuf_decoder.protobuf_decoder import Parserimport jsonimport timeimport threadingfrom byte import *from datetime import datetimeimport base64async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:    await update.message.reply_text(f"To send likes write : \n /like 12345678")# Define a handler to handle user inputasync def send_ids(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:    global TOKENS    username = update.message.from_user.username    print(username)     await update.message.reply_text(f'Sending a request to the server ðŸš€')    time.sleep(1)    print('-----------------------------------------------------------------------')    await update.message.reply_text(f'Get request wait... ')    args = context.args    # Ceck if exactly 4 IDs are provided    if len(args) == 1:          # Check if all IDs are numeric        if all(id.isdigit() for id in args):            # Process the IDs (example: join them into a string)                        ids_str = ', '.join(args)            print(args)            uid= args[0]            threading.Thread(target=start_like,args=(uid,)).start()                        await update.message.reply_text(f"Sending likes to UID : {ids_str} Succesfully âœ…")        else:            await update.message.reply_text("ID NOT FOUND")    else:        await update.message.reply_text("ID NOT FOUND")    # else:    #     await update.message.reply_text(f'Ø§Ù†Øª ØºÙŠØ± Ù…Ø³Ù…ÙˆØ­ Ù„Ùƒ Ø¨ Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù‡Ø°Ø§ Ø§Ù„Ø§Ù…Ø± .')    # Extract the command argumentsasync def lag(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:        username = update.message.from_user.username    print(username)    if username in  ALLOWED_USERNAME:        await update.message.reply_text(f'welcome')# from telegram import Update # async def hello(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:#     await update.message.reply_text(f'Hello brad{update.effective_user.first_name}')# app = ApplicationBuilder().token("token").build()# app.add_handler(CommandHandler("hello", hello))# app.run_polling()def main() -> None:    # Create an Updater object to fetch updates from Telegram        app = ApplicationBuilder().token("7303772633:AAHMQ7NInE9ngJP-DLm2GSYx1JKz5XC84Vs").build()    # Get the dispatcher to register handlers    # Register a handler for the /start command    app.add_handler(CommandHandler("start", start))    # Register a handler for the custom command to send IDs    app.add_handler(CommandHandler("like", send_ids))        time.sleep(1)    app.add_handler(CommandHandler("lag", lag))    # Start the bot    app.run_polling()        # Run the bot until you press Ctrl-C    app.idle()if __name__ == '__main__':    main()